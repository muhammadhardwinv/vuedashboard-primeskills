{"remainingRequest":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\src\\components\\Inputs\\formGroupInput.vue?vue&type=style&index=0&id=2aa0f256&lang=css&","dependencies":[{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\src\\components\\Inputs\\formGroupInput.vue","mtime":1670231463000},{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\css-loader\\dist\\cjs.js","mtime":1682566248803},{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1682566250605},{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\postcss-loader\\src\\index.js","mtime":1682566249506},{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1682566248145},{"path":"C:\\Users\\MHV\\Desktop\\Project Primeskills\\vue-light-bootstrap-dashboard-pro-v1.4.2\\vue-light-bootstrap-dashboard-pro-v1.4.2\\node_modules\\vue-loader\\lib\\index.js","mtime":1682566250057}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5pbnB1dC1ncm91cC5oYXMtcmlnaHQtc2xvdCBpbnB1dHsKICBib3JkZXItcmlnaHQ6IDA7Cn0KCg=="},{"version":3,"sources":["formGroupInput.vue"],"names":[],"mappings":";AAgHA;AACA;AACA","file":"formGroupInput.vue","sourceRoot":"src/components/Inputs","sourcesContent":["<template>\n  <div class=\"form-group\"\n       :class=\"[\n       {'input-group': hasIcon},\n       {'has-right-slot': addonRightIcon || this.$slots.addonRight},\n       {'has-error': error},\n       {'input-group-focus': focused},\n       {'has-label': label || $slots.label},\n       {'has-success': !error && touched && hadError}]\">\n    <slot name=\"label\">\n      <label v-if=\"label\" :class=\"labelClasses\">\n        {{label}}\n        <span v-if=\"required\">*</span>\n      </label>\n    </slot>\n\n    <span v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-addon input-group-prepend\">\n      <slot name=\"addonLeft\">\n        <i :class=\"addonLeftIcon\"></i>\n      </slot>\n    </span>\n    <slot>\n      <input\n        :value=\"value\"\n        v-on=\"listeners\"\n        v-bind=\"$attrs\"\n        class=\"form-control\"\n        :class=\"[{valid: value && !error}, inputClasses]\"\n        aria-describedby=\"addon-right addon-left\">\n    </slot>\n    <span v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-addon input-group-append\">\n      <slot name=\"addonRight\">\n        <i :class=\"addonRightIcon\"></i>\n      </slot>\n    </span>\n\n    <slot name=\"infoBlock\"></slot>\n    <slot name=\"helpBlock\">\n      <div class=\"text-danger invalid-feedback\" style=\"display: block;\" :class=\"{'mt-2': hasIcon}\" v-if=\"error\">\n        {{ error }}\n      </div>\n    </slot>\n  </div>\n</template>\n<script>\n  export default {\n    inheritAttrs: false,\n    name: 'fg-input',\n    props: {\n      required: Boolean,\n      label: String,\n      error: String,\n      labelClasses: String,\n      inputClasses: String,\n      value: [String, Number],\n      addonRightIcon: String,\n      addonLeftIcon: String\n    },\n    data () {\n      return {\n        touched: false,\n        focused: false,\n        hadError: false\n      }\n    },\n    computed: {\n      listeners () {\n        return {\n          ...this.$listeners,\n          input: this.updateValue,\n          focus: this.onFocus,\n          blur: this.onBlur\n        }\n      },\n      hasIcon () {\n        const {addonRight, addonLeft} = this.$slots\n        return addonRight !== undefined || addonLeft !== undefined || this.addonRightIcon !== undefined || this.addonLeftIcon !== undefined\n      }\n    },\n    methods: {\n      updateValue (evt) {\n        let value = evt.target.value\n        if (!this.touched && value) {\n          this.touched = true\n        }\n        this.$emit('input', value)\n      },\n      onFocus (value) {\n        this.focused = true\n        this.$emit('focus', value)\n      },\n      onBlur (value) {\n        this.focused = false\n        this.$emit('blur', value)\n      }\n    },\n    watch: {\n      error (value) {\n        if (value) {\n          this.hadError = true\n        }\n      }\n    }\n  }\n</script>\n<style>\n  .input-group.has-right-slot input{\n    border-right: 0;\n  }\n\n</style>\n"]}]}