import { Ref, ToRefs, UnwrapNestedRefs } from "vue";
declare type LoadDataFunction<T> = (page: number, payload?: T) => Promise<boolean>;
interface UsePaginationOptions<T = unknown> {
    loadData: LoadDataFunction<T>;
    payload?: T;
}
interface UseMultiPaginationOption<T> extends UsePaginationOptions<T> {
    keyExtractor: (payload: T) => string;
}
interface PaginationData<T> {
    page: number;
    loading: boolean;
    hasMore: boolean;
    loadData: LoadDataFunction<T>;
}
export declare type Pagination<T> = ToRefs<PaginationData<T> extends Ref ? PaginationData<T> : UnwrapNestedRefs<PaginationData<T>>> & {
    loadMore: () => Promise<boolean>;
};
export declare function usePagination<T>(options: UsePaginationOptions<T>): Pagination<T>;
export declare function useMultiPagination<T>(options: UseMultiPaginationOption<T>): (payload: T) => Pagination<T> | undefined;
export {};
