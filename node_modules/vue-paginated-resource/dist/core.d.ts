import type { Ref } from 'vue';
import type { ComposableCreationOptions } from '@/types/composableCreation';
import type { PageRelatedRequestOptions, PaginatedRequestMethod } from '@/types/requests';
export declare const createPaginatedResourceComposable: <PageKeyType extends string = "page", PageSizeKeyType extends string | undefined = undefined>(composableOptions: ComposableCreationOptions<PageKeyType, PageSizeKeyType, PageSizeKeyType extends string ? number : never>) => <ElementType, OptionsType extends PageRelatedRequestOptions<PageKeyType, PageSizeKeyType>>(paginatedRequestMethod: PaginatedRequestMethod<ElementType, OptionsType>, page: Ref<number>, resetPage: () => void, requestOptions: Omit<OptionsType, PageKeyType | keyof (PageSizeKeyType extends string ? Record<NonNullable<PageSizeKeyType>, number> : Record<never, never>)>) => {
    total: Ref<number>;
    pageElements: import("vue").ComputedRef<ElementType[]>;
    loading: Ref<boolean>;
    previousPageAvailable: import("vue").ComputedRef<boolean>;
    nextPageAvailable: import("vue").ComputedRef<boolean>;
    pageLimits: import("vue").ComputedRef<{
        firstElement: number;
        lastElement: number;
    }>;
};
//# sourceMappingURL=core.d.ts.map